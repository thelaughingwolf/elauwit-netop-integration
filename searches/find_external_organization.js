const perform = async (z, bundle) => {
  const baseUrl =
    bundle.authData.env === 'production' ? 'netopcld.net' : 'net-bot.com';

  const getRecord = (id) => {
    const options = {
      url: `https://${baseUrl}/1.0/ext/organizations/${id}`,
      method: 'GET',
      headers: {
        'Content-Type': 'application/json', // Required, incorrectly
        Accept: 'application/json',
        Authorization: `Bearer ${bundle.authData.id_token}`,
      },
    };

    return z.request(options).then((response) => {
      if (response.status === 403) {
        // No record exists - return null
        return null;
      } else if (response.status === 200) {
        // Record exists - return it
        return response.json;
      } else {
        // Other error - throw for calling code;
        response.throwForStatus();
        throw new Error(`Unrecognized response ${response.status}`);
      }
    });
  };

  return getRecord(bundle.inputData.externalSystemId).then((existingRecord) => {
    const results = [];

    if (existingRecord) {
      results.push(existingRecord);
    }

    return results;
  });
};

module.exports = {
  operation: {
    perform: perform,
    inputFields: [
      {
        key: 'externalSystemId',
        label: 'External ID',
        type: 'string',
        helpText: 'Provide the ID used by the external system.',
        required: true,
        list: false,
        altersDynamicFields: false,
      },
    ],
    sample: {
      id: 27,
      name: 'Organization Name',
      parentOrg: 11,
      settings: null,
      address: {
        addressLine1: '42 Street Road',
        addressLine2: null,
        lat: 40.1,
        lon: -85.4,
        city: 'Pawnee',
        state: 'IN',
        zipcode: '47302',
        country: 'US',
      },
      source_system: 'Zapier Testing',
      additional_properties: { property_type: 'PropertyOwner' },
      tags: null,
      hierarchy: '1,11,27',
      tenants: [],
      externalId: 'test-id-4',
    },
    outputFields: [
      { key: 'id', label: 'NetOp ID' },
      { key: 'name', label: 'Name' },
      { key: 'parentOrg', label: 'NetOp ID of Parent Organization' },
      { key: 'settings', label: 'Settings Map' },
      { key: 'address__addressLine1', label: 'Street Line 1' },
      { key: 'address__addressLine2', label: 'Street Line 2' },
      { key: 'address__lat', label: 'Latitude', type: 'number' },
      { key: 'address__lon', label: 'Longitude', type: 'number' },
      { key: 'address__city', label: 'City' },
      { key: 'address__state', label: 'State' },
      { key: 'address__zipcode', label: 'Zipcode' },
      { key: 'address__country', label: 'Country Code' },
      { key: 'source_system', label: 'Name of External System' },
      { key: 'additional_properties__property_type', label: 'Property Type' },
      { key: 'tags', label: 'List of Tags' },
      { key: 'hierarchy', label: 'Autogenerated NetOp Hierarchy' },
      { key: 'externalId', label: 'ID in External System' },
    ],
  },
  key: 'find_external_organization',
  noun: 'Organization',
  display: {
    label: 'Find Organization By External System ID',
    description: 'Retrieves an Organization by External ID',
    hidden: false,
    important: true,
  },
};
